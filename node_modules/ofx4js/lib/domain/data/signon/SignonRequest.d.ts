import { RequestMessage } from "../RequestMessage";
import { FinancialInstitutionInfo } from "./FinancialInstitution";
/**
 * Sign-on request
 *
 * @see "Section 2.5.1.2, OFX Spec."
 */
export declare class SignonRequest extends RequestMessage {
    /**
     * @see "Section 2.5.1"
     */
    static ANONYMOUS_USER: string;
    private timestamp;
    private userId;
    private password;
    private userKey;
    private generateUserKey;
    private language;
    private financialInstitution;
    private sessionId;
    private applicationId;
    private applicationVersion;
    private clientUID;
    private additionalCredentials1;
    private additionalCredentials2;
    private authToken;
    private accessKey;
    constructor();
    /**
     * The date and time of the request.
     *
     * @return The date and time of the request.
     */
    getTimestamp(): Date;
    /**
     * The date and time of the request.
     *
     * @param timestamp The date and time of the request.
     */
    setTimestamp(timestamp: Date): void;
    /**
     * The user id.
     *
     * @return The user id.
     */
    getUserId(): string;
    /**
     * The user id.
     *
     * @param userId The user id.
     */
    setUserId(userId: string): void;
    /**
     * The password.
     *
     * @return The password.
     */
    getPassword(): string;
    /**
     * The password.
     *
     * @param password The password.
     */
    setPassword(password: string): void;
    /**
     * The user key provided by the server so as not to require further username/password authentication.
     *
     * @return The user key provided by the server so as not to require further username/password authentication.
     */
    getUserKey(): string;
    /**
     * The user key provided by the server so as not to require further username/password authentication.
     *
     * @param userKey The user key provided by the server so as not to require further username/password authentication.
     */
    setUserKey(userKey: string): void;
    /**
     * Whether to request the server to generate a user key.
     *
     * @return Whether to request the server to generate a user key.
     */
    getGenerateUserKey(): boolean;
    /**
     * Whether to request the server to generate a user key.
     *
     * @param generateUserKey Whether to request the server to generate a user key.
     */
    setGenerateUserKey(generateUserKey: boolean): void;
    /**
     * The three-letter langauge code.
     *
     * @return The three-letter langauge code.
     * @see java.util.Locale#getISO3Language()
     */
    getLanguage(): string;
    /**
     * The three-letter langauge code.
     *
     * @param language The three-letter langauge code.
     */
    setLanguage(language: string): void;
    /**
     * The financial institution.
     *
     * @return The financial institution.
     */
    getFinancialInstitution(): FinancialInstitutionInfo;
    /**
     * The financial institution.
     *
     * @param financialInstitution The financial institution.
     */
    setFinancialInstitution(financialInstitution: FinancialInstitutionInfo): void;
    /**
     * The server-supplied session id.
     *
     * @return The server-supplied session id.
     */
    getSessionId(): string;
    /**
     * The server-supplied session id.
     *
     * @param sessionId The server-supplied session id.
     */
    setSessionId(sessionId: string): void;
    /**
     * The application id.
     *
     * @return The application id.
     */
    getApplicationId(): string;
    /**
     * The application id.
     *
     * @param applicationId The application id.
     */
    setApplicationId(applicationId: string): void;
    /**
     * The application version.
     *
     * @return The application version.
     */
    getApplicationVersion(): string;
    /**
     * The application version.
     *
     * @param applicationVersion The application version.
     */
    setApplicationVersion(applicationVersion: string): void;
    /**
     * The client-supplied UID.
     *
     * @return The client-supplied UID.
     */
    getClientUID(): string;
    /**
     * The client-supplied UID.
     *
     * @param clientUID The client-supplied UID.
     */
    setClientUID(clientUID: string): void;
    /**
     * Any additional credentials.
     *
     * @return Any additional credentials.
     */
    getAdditionalCredentials1(): string;
    /**
     * Any additional credentials.
     *
     * @param additionalCredentials1 Any additional credentials.
     */
    setAdditionalCredentials1(additionalCredentials1: string): void;
    /**
     * Any additional credentials.
     *
     * @return Any additional credentials.
     */
    getAdditionalCredentials2(): string;
    /**
     * Any additional credentials.
     *
     * @param additionalCredentials2 Any additional credentials.
     */
    setAdditionalCredentials2(additionalCredentials2: string): void;
    /**
     * The authentication token.
     *
     * @return The authentication token.
     */
    getAuthToken(): string;
    /**
     * The authentication token.
     *
     * @param authToken The authentication token.
     */
    setAuthToken(authToken: string): void;
    /**
     * The access key.
     *
     * @return The access key.
     */
    getAccessKey(): string;
    /**
     * The access key.
     *
     * @param accessKey The access key.
     */
    setAccessKey(accessKey: string): void;
}
