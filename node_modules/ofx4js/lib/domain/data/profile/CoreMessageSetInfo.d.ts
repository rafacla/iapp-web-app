import { ApplicationSecurity } from "../ApplicationSecurity";
import { SynchronizationCapability } from "./SynchronizationCapability";
/**
 * Core information about a specific version of a specific message set.
 *
 * @see "Section 7.2.1, OFX Spec"
 */
export declare class CoreMessageSetInfo {
    private version;
    private serviceProviderName;
    private url;
    private security;
    private sslRequired;
    private realm;
    private language;
    private syncCapability;
    private fileBasedErrorRecoverySupport;
    private timeout;
    constructor();
    /**
     * Version of the message set.
     *
     * @return The version of the message set.
     */
    getVersion(): string;
    /**
     * The version of the message set.
     *
     * @param version The version of the message set.
     */
    setVersion(version: string): void;
    /**
     * The name of the service provider (sometimes the message set processing is outsourced).
     *
     * @return The name of the service provider (sometimes the message set processing is outsourced).
     */
    getServiceProviderName(): string;
    /**
     * The name of the service provider (sometimes the message set processing is outsourced).
     *
     * @param serviceProviderName The name of the service provider (sometimes the message set processing is outsourced).
     */
    setServiceProviderName(serviceProviderName: string): void;
    /**
     * The URL at which the message set is processed.
     *
     * @return The URL at which the message set is processed.
     */
    getUrl(): string;
    /**
     * The URL at which the message set is processed.
     *
     * @param url The URL at which the message set is processed.
     */
    setUrl(url: string): void;
    /**
     * The application-level security required for this message set.
     *
     * @return The application-level security required for this message set.
     */
    getSecurity(): ApplicationSecurity;
    /**
     * The application-level security required for this message set.
     *
     * @param security The application-level security required for this message set.
     */
    setSecurity(security: ApplicationSecurity): void;
    /**
     * Whether transport-level security is required for this message set.
     *
     * @return Whether transport-level security is required for this message set.
     */
    getSslRequired(): boolean;
    /**
     * Whether transport-level security is required for this message set.
     *
     * @param sslRequired Whether transport-level security is required for this message set.
     */
    setSslRequired(sslRequired: boolean): void;
    /**
     * The sign-on realm.
     *
     * @return The sign-on realm.
     */
    getRealm(): string;
    /**
     * The sign-on realm.
     *
     * @param realm The sign-on realm.
     */
    setRealm(realm: string): void;
    /**
     * The language.
     *
     * @return The language.
     * @see java.util.Locale#getISO3Language()
     */
    getLanguage(): string;
    /**
     * The language.
     *
     * @param language The language.
     */
    setLanguage(language: string): void;
    /**
     * The synchronization capability for this message set.
     *
     * @return The synchronization capability for this message set.
     */
    getSyncCapability(): SynchronizationCapability;
    /**
     * The synchronization capability for this message set.
     *
     * @param syncCapability The synchronization capability for this message set.
     */
    setSyncCapability(syncCapability: SynchronizationCapability): void;
    /**
     * Whether there exists support for resposne-file based error recovery.
     *
     * @return Whether there exists support for resposne-file based error recovery.
     */
    getFileBasedErrorRecoverySupport(): boolean;
    /**
     * Whether there exists support for resposne-file based error recovery.
     *
     * @param fileBasedErrorRecoverySupport Whether there exists support for resposne-file based error recovery.
     */
    setFileBasedErrorRecoverySupport(fileBasedErrorRecoverySupport: boolean): void;
    /**
     * Gets the "INTU.TIMEOUT" field. There's no public documentation of this field but E*TRADE sends
     * it. It likely is some type of timeout in seconds.
     *
     * @return the "INTU.TIMEOUT" property
     */
    getIntuTimeout(): number;
    /**
     * Sets the "INTU.TIMEOUT" field. There's no public documentation of this field but E*TRADE sends
     * it. It likely is some type of timeout in seconds.
     *
     * @param timeout the "INTU.TIMEOUT" property
     */
    setIntuTimeout(timeout: number): void;
}
