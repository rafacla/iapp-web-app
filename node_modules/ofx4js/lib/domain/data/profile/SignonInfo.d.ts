import { SignonProfile } from "../SignonProfile";
import { CharacterType } from "./CharacterType";
/**
 * Sign-on information
 *
 * @see "Section 7.2.2, OFX Spec"
 */
export declare class SignonInfo implements SignonProfile {
    private realm;
    private minPasswordCharacters;
    private maxPasswordCharacters;
    private passwordCharacterType;
    private passwordCaseSensitive;
    private passwordSpecialCharsAllowed;
    private passwordSpacesAllowed;
    private changePasswordSupported;
    private changePasswordFirstRequired;
    private additionalCredientialsLabel1;
    private additionalCredientialsLabel2;
    private clientUIDRequired;
    private authTokenRequiredForFirstSignon;
    private authTokenLabel;
    private authTokenInfoURL;
    private mfaSupported;
    private mfaChallengeRequiredForFirstSignon;
    constructor();
    /**
     * The name of the sign-on realm.
     *
     * @return The name of the sign-on realm.
     */
    getRealm(): string;
    /**
     * The name of the sign-on realm.
     *
     * @param realm The name of the sign-on realm.
     */
    setRealm(realm: string): void;
    /**
     * The minimum number of password characters.
     *
     * @return The minimum number of password characters.
     */
    getMinPasswordCharacters(): number;
    /**
     * The minimum number of password characters.
     *
     * @param minPasswordCharacters The minimum number of password characters.
     */
    setMinPasswordCharacters(minPasswordCharacters: number): void;
    /**
     * The maximum number of password characters.
     *
     * @return The maximum number of password characters.
     */
    getMaxPasswordCharacters(): number;
    /**
     * The maximum number of password characters.
     *
     * @param maxPasswordCharacters The maximum number of password characters.
     */
    setMaxPasswordCharacters(maxPasswordCharacters: number): void;
    /**
     * The type of password characters supported.
     *
     * @return The type of password characters supported.
     */
    getPasswordCharacterType(): CharacterType;
    /**
     * The type of password characters supported.
     *
     * @param passwordCharacterType The type of password characters supported.
     */
    setPasswordCharacterType(passwordCharacterType: CharacterType): void;
    /**
     * Whether the password is case-sensitive.
     *
     * @return Whether the password is case-sensitive.
     */
    getPasswordCaseSensitive(): boolean;
    /**
     * Whether the password is case-sensitive.
     *
     * @param passwordCaseSensitive Whether the password is case-sensitive.
     */
    setPasswordCaseSensitive(passwordCaseSensitive: boolean): void;
    /**
     * Whether special characters are allowed in the password.
     *
     * @return Whether special characters are allowed in the password.
     */
    getPasswordSpecialCharsAllowed(): boolean;
    /**
     * Whether special characters are allowed in the password.
     *
     * @param passwordSpecialCharsAllowed Whether special characters are allowed in the password.
     */
    setPasswordSpecialCharsAllowed(passwordSpecialCharsAllowed: boolean): void;
    /**
     * Whether spaces are allowed in the password.
     *
     * @return Whether spaces are allowed in the password.
     */
    getPasswordSpacesAllowed(): boolean;
    /**
     * Whether spaces are allowed in the password.
     *
     * @param passwordSpacesAllowed Whether spaces are allowed in the password.
     */
    setPasswordSpacesAllowed(passwordSpacesAllowed: boolean): void;
    /**
     * Whether the server can process a password change request for this realm.
     *
     * @return Whether the server can process a password change request for this realm.
     */
    getChangePasswordSupported(): boolean;
    /**
     * Whether the server can process a password change request for this realm.
     *
     * @param changePasswordSupported Whether the server can process a password change request for this realm.
     */
    setChangePasswordSupported(changePasswordSupported: boolean): void;
    /**
     * Whether the server requires the user to change their password as part of their first signon.
     *
     * @return Whether the server requires the user to change their password as part of their first signon.
     */
    getChangePasswordFirstRequired(): boolean;
    /**
     * Whether the server requires the user to change their password as part of their first signon.
     *
     * @param changePasswordFirstRequired Whether the server requires the user to change their password as part of their first signon.
     */
    setChangePasswordFirstRequired(changePasswordFirstRequired: boolean): void;
    /**
     * Label for a set of additional credentials that the user must supply.
     *
     * @return Label for a set of additional credentials that the user must supply.
     */
    getAdditionalCredientialsLabel1(): string;
    /**
     * Label for a set of additional credentials that the user must supply.
     *
     * @param additionalCredientialsLabel1 Label for a set of additional credentials that the user must supply.
     */
    setAdditionalCredientialsLabel1(additionalCredientialsLabel1: string): void;
    /**
     * Label for a set of additional credentials that the user must supply.
     *
     * @return Label for a set of additional credentials that the user must supply.
     */
    getAdditionalCredientialsLabel2(): string;
    /**
     * Label for a set of additional credentials that the user must supply.
     *
     * @param additionalCredientialsLabel2 Label for a set of additional credentials that the user must supply.
     */
    setAdditionalCredientialsLabel2(additionalCredientialsLabel2: string): void;
    /**
     * Whether a client UID is required for teh sign-on.
     *
     * @return Whether a client UID is required for teh sign-on.
     */
    getClientUIDRequired(): boolean;
    /**
     * Whether a client UID is required for teh sign-on.
     *
     * @param clientUIDRequired Whether a client UID is required for teh sign-on.
     */
    setClientUIDRequired(clientUIDRequired: boolean): void;
    /**
     * Whether an auth token is required for the sign-on.
     *
     * @return Whether an auth token is required for the sign-on.
     */
    getAuthTokenRequiredForFirstSignon(): boolean;
    /**
     * Whether an auth token is required for the sign-on.
     *
     * @param authTokenRequiredForFirstSignon
     *         Whether an auth token is required for the sign-on.
     */
    setAuthTokenRequiredForFirstSignon(authTokenRequiredForFirstSignon: boolean): void;
    /**
     * The label of the auth token.
     *
     * @return The label of the auth token.
     */
    getAuthTokenLabel(): string;
    /**
     * The label of the auth token.
     *
     * @param authTokenLabel The label of the auth token.
     */
    setAuthTokenLabel(authTokenLabel: string): void;
    /**
     * The URL for the auth token information.
     *
     * @return The URL for the auth token information.
     */
    getAuthTokenInfoURL(): string;
    /**
     * The URL for the auth token information.
     *
     * @param authTokenInfoURL The URL for the auth token information.
     */
    setAuthTokenInfoURL(authTokenInfoURL: string): void;
    /**
     * Whether MFA is supported.
     *
     * @return Whether MFA is supported.
     */
    getMfaSupported(): boolean;
    /**
     * Whether MFA is supported.
     *
     * @param mfaSupported Whether MFA is supported.
     */
    setMfaSupported(mfaSupported: boolean): void;
    /**
     * Whether an MFA challenge request is required for the first sign-on into this realm.
     *
     * @return Whether an MFA challenge request is required for the first sign-on into this realm.
     */
    getMfaChallengeRequiredForFirstSignon(): boolean;
    /**
     * Whether an MFA challenge request is required for the first sign-on into this realm.
     *
     * @param mfaChallengeRequiredForFirstSignon
     *         Whether an MFA challenge request is required for the first sign-on into this realm.
     */
    setMfaChallengeRequiredForFirstSignon(mfaChallengeRequiredForFirstSignon: boolean): void;
}
